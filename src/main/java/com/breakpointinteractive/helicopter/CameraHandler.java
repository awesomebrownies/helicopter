package com.breakpointinteractive.helicopter;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.wrapper.play.server.WrapperPlayServerPlayerPositionAndLook;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.util.Vector;

import java.util.HashMap;
import java.util.Timer;
import java.util.TimerTask;

public class CameraHandler implements Listener {
    public static HashMap<Player, Vector> queuedShiftAmount = new HashMap<>();

    @EventHandler
    public void onJoin(PlayerJoinEvent event){
        Player player = event.getPlayer();
        trackPlayer(player);
    }

    public static void trackPlayer(Player player){
        Timer timer = new Timer();
        //auto-generated by intellij
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                if(!player.isOnline()){
                   cancel();
                }else if(queuedShiftAmount.get(player) != null && !queuedShiftAmount.get(player).isZero()){
                    float xDifference = (float) queuedShiftAmount.get(player).getX();
                    float yDifference = (float) queuedShiftAmount.get(player).getY();

                    if(Math.abs(yDifference) > 1){
                        yDifference = (yDifference < 0 ? -1 : 1) * Math.max(0, Math.min(0.6f, Math.abs(yDifference)));
                    }else{
                        yDifference = (yDifference < 0 ? -1 : 1) * Math.max(0, Math.min(0.2f, Math.abs(yDifference)));
                    }

                    xDifference = (xDifference < 0 ? -1 : 1) * Math.max(0, Math.min(0.6f, Math.abs(xDifference)));

                    WrapperPlayServerPlayerPositionAndLook positionAndLook =
                        new WrapperPlayServerPlayerPositionAndLook(0, 0, 0, yDifference,
                                xDifference, (byte) 0b11111, 0, false
                        );
                    queuedShiftAmount.get(player).add(new Vector(-xDifference, -yDifference, 0));
                    PacketEvents.getAPI().getPlayerManager().sendPacket(player, positionAndLook);
                }
            }
        }, 0, 10);
    }

    public static HashMap<Player, Vector> getQueuedShiftAmount(){
        return queuedShiftAmount;
    }
}
